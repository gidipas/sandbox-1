{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "VMPrefix": {
            "defaultValue": "prot007",
            "type": "String"
        },
        "CompNodeVMsku": {
            "type": "string",
            "defaultValue": "Standard_E64s_v4",
            "allowedValues": [
                "Standard_E16s_v4",
                "Standard_E64s_v4",
                "Standard_HB60rs",
                "Standard_HC44rs",
                "Standard_E64as_v4",
                "Standard_E48s_v4",
                "Standard_E48as_v4"
            ],
            "metadata": {
                "description": "Instance type to use for the compute nodes"
            }
        },
        "NodeCount": {
            "type": "int",
            "metadata": {
            "description": "Number of VM instances for Compute Node Scaleset (100 or less)."
            },
            "defaultValue": 2,
            "maxValue": 100
        },
        "AVSet": {
            "defaultValue": "PROT02",
            "type": "String"
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
             ],
            "metadata": {
                "description": "Authentication type for the virtual machines"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Admin password for the virtual machines"
            }
        },
        "sshPublicKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SSH public key that will be included on all nodes. The OpenSSH public key can be generated with tools like ssh-keygen on Linux or OS X."
            }
        },
        "user1Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "user1UID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "user1sshPublicKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SSH public key that will be included on all nodes. The OpenSSH public key can be generated with tools like ssh-keygen on Linux or OS X."
            }
        },
        "user2Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "user2UID": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "user2sshPublicKey": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "SSH public key that will be included on all nodes. The OpenSSH public key can be generated with tools like ssh-keygen on Linux or OS X."
            }
        },
        "galleries_SharedImage_externalid": {
            "defaultValue": "/subscriptions/97f10d4d-70b2-4329-99dc-558725463ef8/resourceGroups/image-upload/providers/Microsoft.Compute/galleries/SharedImage",
            "type": "String"
        },
        "existingVNetName": {
            "type": "string",
            "defaultValue": "POC-Network",
            "metadata": {
                "description": "name of existing Virtual Network"
            }
        },
        "existingVNetResourceGroup": {
            "type": "string",
            "defaultValue": "POC-ResourceGroup",
            "metadata": {
                "description": "name of Resource Group for existing Virtual Network"
            }
        },
        "existingSubnetName": {
            "type": "string",
            "defaultValue": "POC-Subnet",
            "metadata": {
                "description": "name of existing Virtual Network"
            }
        }
    },
    "variables": {
        "longNamingInfix": "[toLower(parameters('vmPrefix'))]",
        "newStorageAccountSuffix": "[concat(variables('longNamingInfix'), 'sa')]",
        "DiagSAName": "[concat(uniqueString(concat(resourceGroup().id, variables('newStorageAccountSuffix'))), 'diag')]",
        "vnetID": "[resourceId(parameters('existingVNetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('existingVNetName'))]",
        "SubnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('existingSubnetName'))]",
        "sshKeyPath": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]",    
        "linuxConfiguration_sshPublicKey": {
            "disablePasswordAuthentication": "true",
            "ssh": {
                "publicKeys": [
                    {
                    "path": "[variables('sshKeyPath')]",
                    "keyData": "[parameters('sshPublicKey')]"
                    }
                ]
            }
        },
        "linuxConfiguration_password": { },
        "linuxConfiguration": "[variables(concat('linuxConfiguration_',parameters('authenticationType')))]",
        "vmScripts": {
            "scriptsToDownload": [
                "https://raw.githubusercontent.com/grandparoach/simpleMPIPOC/Cat/cn-setup.sh"
            ],
        "commandToExecute": "[concat('bash cn-setup.sh ', parameters('adminUserName'),' ', parameters('user1Name'),' ', parameters('user1UID'),' ', parameters('user1sshPublicKey'),' ', parameters('user2Name'),' ', parameters('user2UID'),' ', parameters('user2sshPublicKey'))]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('DiagSAName')]",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "properties": {
                "accountType": "Standard_LRS"
            }
        },
        {
            "apiVersion": "2018-04-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(parameters('vmPrefix'), '-nic', padLeft(copyindex(1), 2, '0'))]",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "NodeNicCopy",
                "count": "[parameters('NodeCount')]"
            },
            "properties": {
                "ipConfigurations": [
                {
                "name": "computeNodeIp",
                    "properties": {
                        "privateIPAllocationMethod": "Dynamic",
                        "subnet": {
                            "id": "[variables('SubnetRef')]"
                        }
                    }
                }
                ],
                "enableAcceleratedNetworking": true
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "name": "[concat(parameters('vmPrefix'), padLeft(copyindex(1), 2, '0'))]",
            "location": "[resourceGroup().location]",
            "tags": {
                "platformsettings.host_environment.disablehyperthreading": "true"
            },
            "dependsOn": [  
                "[concat('Microsoft.Network/networkInterfaces/', parameters('vmPrefix'), '-nic', padLeft(copyindex(1), 2, '0'))]"
            ],
            "copy": {
              "name": "VmCopy",
              "count": "[parameters('NodeCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', parameters('AVSet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('CompNodeVMsku')]"
                },
                "storageProfile": {                    
                    "imageReference": {
                        "id": "[concat(parameters('galleries_SharedImage_externalid'), '/images/snps-proteusimg')]"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "createOption": "FromImage",
                        "caching": "ReadWrite",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        },
                        "diskSizeGB": 30
                    },
                    "dataDisks": []
                },

                "osProfile": {
                    "computerName": "[concat(parameters('vmPrefix'), padLeft(copyindex(1), 2, '0'))]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": "[variables('linuxConfiguration')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                           "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('vmPrefix'), '-nic', padLeft(copyindex(1), 2, '0')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[concat('http://',variables('DiagSAName'),'.blob.core.windows.net')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2019-07-01",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmPrefix'), padLeft(copyindex(1), 2, '0'), '/init')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('vmPrefix'), padLeft(copyindex(1), 2, '0')))]"
            ],
            "copy": {
                "name": "computeNodeExtensionsCopy",
                "count": "[parameters('NodeCount')]"
            },
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": "[variables('vmScripts').scriptsToDownload]",
                    "commandToExecute": "[variables('vmScripts').commandToExecute]"
                }
            }
        }
    ]
}
